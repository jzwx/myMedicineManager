http://blog.csdn.net/free_wind22/article/details/50967723
1.设置用户名
git config --global user.name "jzwx"
2.设置用户邮箱
git config --global user.email "2058631403@qq.com"
3.查看用户配置信息
git config --list
4.生成与github库之间连接的秘钥  id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
ssh-keygen -t rsa -C "2058631403@qq.com"
5.进入到本地做仓库的文件夹下初始化仓库
git init
6.把本地仓库和远程仓库关联起来。如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址
git remote add origin git@github.com:jzwx/mySSH.git
7.git pull git@github.com:jzwx/mySSH.git  从服务器仓库中把最新的文件提取下来
8.git add .
9.git commit -m "LIS-0001_wangxin"
10.git push git@github.com:jzwx/mySSH.git
11.git status
12.git branch -a 看服务器有多少条流
13.git fetch 刷新流
14.git checkout 切换流
15.当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用
git rm file_path
16.当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用
git rm --cached file_path //idea下常用来删除移除out文件夹使它不被版本管理
17.file_path 为文件路径
git checkout head file_path 撤销这个文件的提交（git commit）
18.git checkout . --撤销所有有变更的文件移除暂存区
19.git merge 分支 --合并分支
20.git remote show origin --显示详细远程分支的流
21.git branch -D wangxin_mr --删除分支(本地)
   git push origin --delete wangxin_mr --删除分支(远程)
22.git fetch 或者 git remote prune origin 更新分支
23.git checkout -b 新建分支名 --新建一个分支名

git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态
git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop恢复
git reset --hard HASH #返回到某个节点，不保留修改
git reset --soft HASH #返回到某个节点。保留修改

---
当git push 了代码，此时自己又返现push的代码不想push了想返回上一个版本 此时 我们可以进行如下操作
git回退到上一个版本操作步骤:
1. git log 找到回退版本号
2.git reset --hard +<版本号>
3.git push origin +<分支名
会提示本地的版本落后于远端的版本； 
为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数--force
4.git push origin +<分知名> --force

git reset --hard 之 git版本回退
1.假设有2个提交记录

commit def5adef853da4cc05752bdb36577c127be71ba5

Author: 132982jianan <1072772483@qq.com>
Date:   Thu Dec 28 16:01:36 2017 +0800



    add data to 1.txt

commit f36801544670e00b2f59a28e19017d2786c4085e
Author: 132982jianan <1072772483@qq.com>
Date:   Thu Dec 28 15:59:46 2017 +0800



    init 1.txt
(END)

2.现在回到最开始的那一个提交
git reset --hard f36801544670e00b2f59a28e19017d2786c4085e

3.查看日志，就会发现只剩下一个提交了
git log

commit f36801544670e00b2f59a28e19017d2786c4085e
Author: 132982jianan <1072772483@qq.com>
Date:   Thu Dec 28 15:59:46 2017 +0800

    init 1.txt
(END)


4.这个时候，发现回退版本错了，那么就用git reflog查看提交记录
git reflog

f368015 HEAD@{0}: reset: moving to f36801544670e00b2f59a28e19017d2786c4085e
def5ade HEAD@{1}: reset: moving to def5ade
f368015 HEAD@{2}: reset: moving to f36801544670e00b2f59a28e19017d2786c4085e
def5ade HEAD@{3}: commit: add data to 1.txt
f368015 HEAD@{4}: commit (initial): init 1.txt


5.找出想要回退的版本，进行回退

恢复
git reset --hard def5ade

git的三种回滚方式 soft hard mixed
---


对于经常使用Git的朋友来说，.gitignore配置一定不会陌生。废话不说多了，接下来就来说说这个.gitignore的使用。

首先要强调一点，这个文件的完整文件名就是".gitignore"，注意最前面有个“.”。
一般来说每个Git项目中都需要一个“.gitignore”文件，这个文件的作用就是告诉Git哪些文件不需要添加到版本管理中。实际项目中，很多文件都是不需要版本管理的，比如Python的.pyc文件和一些包含密码的配置文件等等。这个文件的内容是一些规则，Git会根据这些规则来判断是否将文件添加到版本控制中。

下面我们看看常用的规则：
1）/mtk/               过滤整个文件夹
2）*.zip                过滤所有.zip文件
3）/mtk/do.c         过滤某个具体文件

很简单吧，被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。
需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中：
1）!*.zip
2）!/mtk/one.txt

唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。
为什么要有两种规则呢？想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么我们就需要使用：
1）/mtk/
2）!/mtk/one.txt
假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！

最后需要强调的一点是，如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。
简单来说，出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。因此一定要养成在项目开始就创建.gitignore文件的习惯，否则一旦push，处理起来会非常麻烦。

.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为版本管理带来很大的便利，以下是对于配置.gitignore的一些心得记录：
1）配置语法：
以斜杠“/”开头表示目录；
以星号“*”通配多个字符；
以问号“?”通配单个字符
以方括号“[]”包含单个字符的匹配列表；
以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；

此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；

2）示例说明
a）规则：fd1/*
说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；
b）规则：/fd1/*
说明：忽略根目录下的 /fd1/ 目录的全部内容；
c）规则：
/*
!.gitignore
!/fw/bin/
!/fw/sf/
说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；
例子:
# Lines that start with '#' are comments.
# IntelliJ IDEA Project files
.idea
*.iml
*.ipr
*.iws
out
 
# Eclipse Project files
.classpath
.project
.settings/
 
bin/
gen/
local.properties
 
.DS_Store
Thumbs.db
 
*.bak
*.tem
*.temp
#.swp
*.*~
~*.*

#git cherry-pick 合并分支过程
1.新建分支
重构分支命名
git checkout -b feature-0107(时间)-wx(姓名)

修复bug分支命名
git checkout -b hotfix-0328(时间)-wx(姓名)

2.使用git cherry-pick 合并开发分支到测试环境
git checkout 自己开发分支
git add .
git commit -m "规格管理重构"(需求名称)
git push origin 自己开发分支
git log (获取到自己提交的commitId)

git checkout test(测试分支)
git pull origin test(拉取测试分支代码)
git cherry-pick 从自己开发分支获取到的自己当前提交的commitId (如果有冲突解决冲突代码，如果没有冲突push代码到测试分支)
git push origin test 

注意：当git cherry-pick commitId的过程中出现文件合并冲突问题时解决冲突并继续cherry-pick当前提交点的操作如下:
步骤一:合并冲突文件
步骤二:git add .
步骤三:git cherry-pick --continue
步骤四:git push oringin 需要合并到的分支
（参考资料:https://www.jianshu.com/p/093ac6580cc6）


如果要取消这次cherry-pick,则使用git cherry-pick --abort，这种情况下当前分支恢复到cherry-pick前的状态，没有改变。

3.git commit -m 内容写错，重新编辑
git commit --amend -m "新的提交信息"

对修改的文件查看修改的内容并进行对比
git status #查新到修改的文件名，复制要查询修改内容并对比差异的文件名
git diff 修改的文件名

git stash的使用场景：当前分支下的某几个文件在工作区正在被修改或者处于暂存区的某几个文件被工作区拿出来继续进行修改了，如果此时需要在当前文件下进行紧急修复bug，就需要把工作区正在修改的文件stash暂存起来，进行bug修复工作，在完成bug修复工作后，提交commit，将暂存的工作区文件内容拿出来继续工作。
操作步骤以及指令
1.将当前的工作现场隐藏起来
git stash

2.查看状态，是干净的
git status 

3.切换到主分支，从主分支上新建bug修复分支
git checkout -b fixbug

4.对文件进行修改提交并推送到仓库也可以不推送切换到主分支使用merge合并fixbug分支内容到主分支上，然后推送到主分支远程仓库中,最后删除fixbug分支
git add .
git commit -m "fix bug"
git checkout master
git merge --no-ff -m "merge bug fix"(提交备注) fixbug(分支名) 
git push origin master
git branch -d fixbug

5.切换到最开始的开发分支，恢复之前存在stash暂存区的内容，继续之前的开发
git checkout dev
git status
git stash list

--------------------------------------------------------------------------------------------------------------
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：
1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。

2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。

6恢复stash暂存区内容后，查看之前修改的内容比对比一下修改内容信息
git status
git diff

git stash 将文件放入暂存区操作
使用场景:
对已经修改但不需要提交到远程仓库或分支上的文件（这样的文件比如有项目的配置文件pom等），这时我们可以将这些修改了但不需要提交的文件放入暂存区，从而做到提交自己想提交的文件以及开

发一半，突然需要解决bug，切换分支，去做其他的事情。
具体操作如下:
步骤如下:
#保存
git stash save "保存到暂存区提交点的描述信息"

#获取到暂存区文件
方法一:git stash apply stash@{0} (提取暂存区文件的同时，不对暂存区以及暂存区文件进行删除)
方法二:git stash pop stash@{0} （提取暂存区文件的同时，还要去暂存区删除该暂存区以及暂存区存放的文件内容）

#查看暂存区提交点
git stash list

#查看暂存区被修改的所有文件
git stash show

参考文档:
https://mp.weixin.qq.com/s/exl0BGRx1smGo2_lN1x3QA
https://blog.csdn.net/yao_94/article/details/88929992
